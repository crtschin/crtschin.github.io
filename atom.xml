<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>(Non-)Functional Ramblings</title>
    <link href="https://crtschin.com/atom.xml" rel="self" />
    <link href="https://crtschin.com" />
    <id>https://crtschin.com/atom.xml</id>
    <author>
        <name>Curtis Chin Jen Sem</name>
        
        <email>reverse(moc.liamg@mesnejnihcosc)</email>
        
    </author>
    <updated>2025-07-13T00:00:00Z</updated>
    <entry>
    <title>Functional programmers enter a diner…</title>
    <link href="https://crtschin.com/drafts/functional-programmers-enter-a-diner.html" />
    <id>https://crtschin.com/drafts/functional-programmers-enter-a-diner.html</id>
    <published>2025-07-13T00:00:00Z</published>
    <updated>2025-07-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[This post explores preventing concurrency deadlocks in Haskell by enforcing a fixed, predefined order for acquiring MVar locks. It details an interface that ensures safe, multi-threaded access to shared state components.]]></summary>
</entry>
<entry>
    <title>Can I pet your DAG?</title>
    <link href="https://crtschin.com/drafts/can-i-pet-your-dag.html" />
    <id>https://crtschin.com/drafts/can-i-pet-your-dag.html</id>
    <published>2025-04-30T00:00:00Z</published>
    <updated>2025-04-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[Haskell's ordered maps are fun tools to have in any arsenal. In this post I give an example on doing dependency resolution quickly using the partially ordered nature of dependency relations, using an extremely contrived example.]]></summary>
</entry>
<entry>
    <title>We’re All CHAMPs On The Inside</title>
    <link href="https://crtschin.com/posts/were-all-champs-on-the-inside.html" />
    <id>https://crtschin.com/posts/were-all-champs-on-the-inside.html</id>
    <published>2025-03-31T00:00:00Z</published>
    <updated>2025-03-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[HAMT's are cool, Haskell has a ubiquitous one in unordered-containers. But other languages have the even cooler CHAMPs. This post is about optimizing the filter-ish functions in an attempt at a drop-in replacement that uses CHAMPs.]]></summary>
</entry>
<entry>
    <title>Harder-Coded Newtypes</title>
    <link href="https://crtschin.com/posts/harder-coded-newtypes.html" />
    <id>https://crtschin.com/posts/harder-coded-newtypes.html</id>
    <published>2024-10-20T00:00:00Z</published>
    <updated>2024-10-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[Newtypes are generally useful to avoid parameter-blindness, but can be cumbersome if each type has it's own wrapper. I explore the use of TypeData and phantom types in Haskell as an alternative way to improve type safety and reduce developer errors.]]></summary>
</entry>
<entry>
    <title>Lazy-ing in My Pool</title>
    <link href="https://crtschin.com/posts/lazying-in-my-pool.html" />
    <id>https://crtschin.com/posts/lazying-in-my-pool.html</id>
    <published>2024-10-06T00:00:00Z</published>
    <updated>2024-10-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[This blog post discusses the implementation of a lazy initialization strategy for managing a pool of resources. Emphasizing the importance of deferring initialization to improve performance in scenarios where not all resources are needed simultaneously.]]></summary>
</entry>
<entry>
    <title>Better than Revivify</title>
    <link href="https://crtschin.com/posts/better-than-revivify.html" />
    <id>https://crtschin.com/posts/better-than-revivify.html</id>
    <published>2024-09-24T00:00:00Z</published>
    <updated>2024-09-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[This blog post discusses my journey of revitalizing my long-neglected website, transitioning to using Hakyll. Including styling with Clay, implementing syntax highlighting with Pygments, using KaTeX for mathematical typesetting, and optimizing font usage.]]></summary>
</entry>
<entry>
    <title>What’s in the Name?</title>
    <link href="https://crtschin.com/posts/all-about-representations.html" />
    <id>https://crtschin.com/posts/all-about-representations.html</id>
    <published>2024-09-20T00:00:00Z</published>
    <updated>2024-09-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[This blog post explores different approaches to implementing a lambda calculus interpreter. It examines various representation methods, including first-order representations and higher-order abstract syntax (HOAS).]]></summary>
</entry>
<entry>
    <title>Roly, Oly, …, Polyvariadic Boogaloo</title>
    <link href="https://crtschin.com/posts/roly-oly-polyvariadic-boogaloo.html" />
    <id>https://crtschin.com/posts/roly-oly-polyvariadic-boogaloo.html</id>
    <published>2020-09-18T00:00:00Z</published>
    <updated>2020-09-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[In the blog post, I author revisits the topic of polyvariadic functions in Haskell, building on a previous attempt by introducing type families to create a more streamlined implementation.]]></summary>
</entry>
<entry>
    <title>Roly, Oly, …, Polyvariadic</title>
    <link href="https://crtschin.com/posts/roly-oly-polyvariadic.html" />
    <id>https://crtschin.com/posts/roly-oly-polyvariadic.html</id>
    <published>2019-07-06T00:00:00Z</published>
    <updated>2019-07-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[This blog post illustrates the concept of polyvariadic functions, using the example of a function that can sum an arbitrary number of integers or return another function.]]></summary>
</entry>
<entry>
    <title>Flooding my ’base</title>
    <link href="https://crtschin.com/posts/flooding-my-base.html" />
    <id>https://crtschin.com/posts/flooding-my-base.html</id>
    <published>2019-02-15T00:00:00Z</published>
    <updated>2019-02-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[I discuss populating a database with generated data, resulting in a simple solution that generates objects sequentially, following a topological sort to ensure dependency preservation.]]></summary>
</entry>

</feed>
